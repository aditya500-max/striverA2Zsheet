//TLE Solution
int maxProfit(vector<int>& prices) {
        vector<int> pr;
        for(int i=0;i<prices.size()-1;i++){
            for(int j=i+1;j<prices.size();j++){
                if(prices[j]>prices[i]){
                  int p=prices[j]-prices[i];
                  if(p>0){
                      pr.push_back(p);
                  }
                }
            }
        }
        if(pr.size()==0){
            return 0;
        }
        int m=*max_element(pr.begin(),pr.end());
        return m;
    }
//optimal//using single loop
//min=INT_MAX and updating its value to find best time to buy
//keeping track of profit p, if prices[i]-min>p(prev profit)
//O(n)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int min=INT_MAX;
        int p=0;
        for(int i=0;i<prices.size();i++){
            if(prices[i]<min){
                min=prices[i];
            }
            int k=prices[i]-min;
            if(k>p){
                p=k;
            }
        }

       
        return p;
    }
};
Method 2 beats 98%

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        ios::sync_with_stdio(0);
        int min=INT_MAX;
        int p=0;
        for(int i=0;i<prices.size();i++){
            if(prices[i]<min){
                min=prices[i];
            }
            if(prices[i]-min>p){
                p=prices[i]-min;
            }
        }

       
        return p;
    }
};
Method 3 
int maxProfit(vector<int> &arr) {
    int maxPro = 0;
    int n = arr.size();
    int minPrice = INT_MAX;

    for (int i = 0; i < arr.size(); i++) {
        minPrice = min(minPrice, arr[i]);
        maxPro = max(maxPro, arr[i] - minPrice);
    }
    
    return maxPro;
}
