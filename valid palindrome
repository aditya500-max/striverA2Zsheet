//Nice use of string functions O(n/2)
//conditions to check:
//convert upper to lower, check for non alpha-numeric, always && with (i<j), check for ' '

=>>>String based functions:
transform(s.begin(),s.end(),s.begin(),::tolower); [string from upper to lower]
transform(s.begin(),s.end(),s.begin(),::toupper)

=> tolower(‘M’) ,toupper(‘m’) for characters
=> isalnum()-> bool check for alpha-numeric or not

class Solution {
public:
    bool isPalindrome(string s) {
         transform(s.begin(),s.end(),s.begin(),::tolower);
         int i=0; int j=s.size()-1;
         while(i<j){
             while(i<j && !isalnum(s[i])){i++;}
             while(i<j && !isalnum(s[j])){j--;}
             while(i<j && s[i]==' '){
                i++;
             }
             while(i<j && s[j]==' '){
                 j--;
             }
             if(s[i]!=s[j]){return false;}
             i++;
             j--;
         }
         return true;
    }
};
