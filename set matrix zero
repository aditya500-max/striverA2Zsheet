//bruteforce
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        //method 1 bruteforce
        ios::sync_with_stdio(0);
        int row=matrix.size();
        int col=matrix[0].size();
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j]==0){
                    markrow(matrix,row,col,i);
                    markcol(matrix,row,col,j);
                }
            }
        }
        for (int i=0;i<row;i++){
        for(int j=0;j<col;j++){
            if(matrix[i][j]==1032){
                matrix[i][j]=0;
            }
        }
    }

    }
    void markrow(vector<vector<int>>& matrix,int row,int col,int i) {
          for(int j=0;j<col;j++){
              if(matrix[i][j]!=0){
                  matrix[i][j]=1032;
              }
          }
    }
     void markcol(vector<vector<int>>& matrix,int row,int col,int j) {
          for(int i=0;i<row;i++){
              if(matrix[i][j]!=0){
                  matrix[i][j]=1032;
              }
          }
    }
    
};
//better(almost optimal) except space complexity
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        
         int row=matrix.size();
         int col=matrix[0].size();
        
         vector<int> rows(row,0);
         vector<int> cols(col,0);
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j]==0){
                    rows[i]=1;
                    cols[j]=1;
                }
            }
        }
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(rows[i]||cols[j]){
                    matrix[i][j]=0;
                }
            }
        }
    }
};
//most optimal//no space complexity
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        bool flag1 = false, flag2 = false;
        for(int i=0; i<n; i++){
            if(matrix[i][0] == 0){
                flag1 = true;
            }
        }
        for(int j=0; j<m; j++){
            if(matrix[0][j] == 0){
                flag2 = true;
            }
        }
        for(int i=1; i<n; i++){
            for(int j=1; j<m; j++){
                if(matrix[i][j] == 0){
                    matrix[i][0] = matrix[0][j] = 0;
                }
            }
        }
        for(int i=1; i<n; i++){
            for(int j=1; j<m; j++){
                if(matrix[i][0] == 0 || matrix[0][j] == 0){
                    matrix[i][j] = 0;
                }
            }
        }
        if(flag1 == true){
            for(int i=0; i<n; i++){
                matrix[i][0] = 0;
            }
        }
        if(flag2 == true){
            for(int j=0; j<m; j++){
                matrix[0][j] = 0;
            }
        }
    }
};
